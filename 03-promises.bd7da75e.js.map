{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEeC,SAASC,cAAc,SAC/BC,iBAAiB,UAAUC,IAChCA,EAAEC,iBAEFC,MAAQ,EACRC,WAAaH,EAAEI,cAAcC,SAASC,MAAMC,MAC5CC,UAAYR,EAAEI,cAAcC,SAASI,KAAKF,MAC1CD,MAAQE,UAER,IAAIE,EAASV,EAAEI,cAAcC,SAASK,OAAOH,MAC7CI,YACGC,WAAaD,aAAY,WACxBL,MAAQE,UAAYN,QAASC,WAC7BD,QACIA,OAASQ,GACXG,cAAcD,YAMtB,SAAuBE,EAAUR,GACTS,KAAKC,SAAW,GAEpCC,EAAAtB,GAASuB,OAAOC,QACd,qBAAqBL,QAAeR,aAGtCW,EAAAtB,GAASuB,OAAOE,QAAQ,kBAAkBN,QAAeR,aAXvDe,CAAcnB,MAAOI,SACpBA","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener(`submit`, e => {\n  e.preventDefault();\n\n  count = 0;\n  startDelay = e.currentTarget.elements.delay.value;\n  stepDelay = e.currentTarget.elements.step.value;\n  delay = stepDelay;\n  // let delay = startDelay;\n  let amount = e.currentTarget.elements.amount.value;\n  setInterval,\n    (intervalId = setInterval(function () {\n      delay = stepDelay * count + +startDelay;\n      count++;\n      if (count == amount) {\n        clearInterval(intervalId);\n      }\n      createPromise(count, delay);\n    }, delay));\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    Notiflix.Notify.success(\n      `Fullfield promise ${position} in ${delay} seconds`\n    );\n  } else {\n    Notiflix.Notify.failure(`Reject promise ${position} in ${delay} seconds`);\n  }\n}\nconst onClick = () => {\n  setTimeout(() => {}, startDelay);\n};\n"],"names":["$eWCmQ","parcelRequire","document","querySelector","addEventListener","e","preventDefault","count","startDelay","currentTarget","elements","delay","value","stepDelay","step","amount","setInterval","intervalId","clearInterval","position","Math","random","$parcel$interopDefault","Notify","success","failure","$47d4ff9957288465$var$createPromise"],"version":3,"file":"03-promises.bd7da75e.js.map"}