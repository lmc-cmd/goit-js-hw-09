{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAYA,IAAK,IAAIC,OAReC,KAAKC,SAAW,GAEpCC,EAAAL,GAASM,OAAOC,QAAQ,cAExBF,EAAAL,GAASM,OAAOE,QAAQ,QAIEN,EAAI,EAAGA,EACnCO,SAAWP,EACXQ,OAASA","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  delay = 1000;\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    Notiflix.Notify.success(`Fullfield `);\n  } else {\n    Notiflix.Notify.failure(`err`);\n  }\n}\n\nfor (let i = createPromise(); i > 5; i + 1) {\n  position = i;\n  delai += delai;\n}\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     resolve(5);\n//   }, 2000);\n// });\n\n// promise\n//   .then(value => {\n//     console.log(value); // 5\n//     return value * 2;\n//   })\n//   .then(value => {\n//     console.log(value); // 10\n//     return value * 3;\n//   })\n//   .then(value => {\n//     console.log(value); // 30\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   })\n//   .finally(() => {\n//     console.log('Final task');\n//   });\n\n// const fetchUserFromServer = username => {\n//   return new Promise((resolve, reject) => {\n//     console.log(`Fetching data for ${username}`);\n\n//     setTimeout(() => {\n//       // Change value of isSuccess variable to simulate request status\n//       const isSuccess = true;\n\n//       if (isSuccess) {\n//         resolve('success value');\n//       } else {\n//         reject('error');\n//       }\n//     }, 2000);\n//   });\n// };\n\n// fetchUserFromServer('Mango')\n//   .then(user => console.log(user))\n//   .catch(error => console.error(error));\n"],"names":["$eWCmQ","parcelRequire","i","Math","random","$parcel$interopDefault","Notify","success","failure","position","delai"],"version":3,"file":"03-promises.153669dd.js.map"}